@using PMaP.Models.DBModels
@using System.Globalization
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SummaryTable> localizer

<div class="row">
    <div class="col-md-12 mts">
        <div id="tableTopScroll" style="overflow-x: auto; overflow-y: hidden; border: none 0px RED;" @onscroll="OnTopScroll">
            <div id="scrollTop" style="overflow-x: hidden; overflow-y: hidden; height:20px;"></div>
        </div>
        <div style="overflow-x: hidden; overflow-y: hidden; border: none 0px RED;">
            <div id="tableView" style="overflow-y: auto;" @onscroll="OnScroll">
                <table id="tableId" class="table table-striped table-bordered" style="background-color:#e6e6e6;">
                    <thead>
                        <tr class="heading" style="color:#336699">
                            <th>
                                <span class="sort-link" @onclick="@(() => SortContractsTable("Id"))">@localizer["Contract"]</span>
                                <span class="fa @(GetContractsSortStyle("Id"))"></span>
                            </th>
                            <th>
                                <span class="sort-link" @onclick="@(() => SortContractsTable("MainParticipantId"))">@localizer["Participant"]</span>
                                <span class="fa @(GetContractsSortStyle("MainParticipantId"))"></span>
                            </th>
                            <th>
                                <span class="sort-link" @onclick="@(() => SortContractsTable("NumParticipants"))">@localizer["NoGuarantors"]</span>
                                <span class="fa @(GetContractsSortStyle("NumParticipants"))"></span>
                            </th>
                            <th>
                                <span class="sort-link" @onclick="@(() => SortContractsTable("TotalAmountOb"))">@localizer["BalanceOB"]</span>
                                <span class="fa @(GetContractsSortStyle("TotalAmountOb"))"></span>
                            </th>
                            <th>
                                <span class="sort-link" @onclick="@(() => SortContractsTable("MaturityPrincipalBalance"))">@localizer["MaturityPrincipalBalance"]</span>
                                <span class="fa @(GetContractsSortStyle("MaturityPrincipalBalance"))"></span>
                            </th>
                            <th>
                                <span class="sort-link" @onclick="@(() => SortContractsTable("OutstandingPrincipalBalance"))">@localizer["OutstandingPrincipalBalance"]</span>
                                <span class="fa @(GetContractsSortStyle("OutstandingPrincipalBalance"))"></span>
                            </th>
                            <th>
                                <span class="sort-link" @onclick="@(() => SortContractsTable("OriginationDate"))">@localizer["OriginationDate"]</span>
                                <span class="fa @(GetContractsSortStyle("OriginationDate"))"></span>
                            </th>
                            <th>
                                <span class="sort-link" @onclick="@(() => SortContractsTable("MaturityDate"))">@localizer["MaturityDate"]</span>
                                <span class="fa @(GetContractsSortStyle("MaturityDate"))"></span>
                            </th>
                            <th>
                                <span class="sort-link" @onclick="@(() => SortContractsTable("FirstUnpaidInstalmentDate"))">@localizer["FirstUnpaidInstallmentDate"]</span>
                                <span class="fa @(GetContractsSortStyle("FirstUnpaidInstalmentDate"))"></span>
                            </th>
                            <th>
                                <span class="sort-link" @onclick="@(() => SortContractsTable("JudicialProcess"))">@localizer["JudicialProcess"]</span>
                                <span class="fa @(GetContractsSortStyle("JudicialProcess"))"></span>
                            </th>
                            <th>
                                <span class="sort-link">@localizer["TypeOfJudicialProcedure"]</span>
                            </th>
                            <th>
                                <span class="sort-link" @onclick="@(() => SortContractsTable("OriginalEntity"))">@localizer["AssignmentEntity"]</span>
                                <span class="fa @(GetContractsSortStyle("OriginalEntity"))"></span>
                            </th>
                            <th>
                                <span class="sort-link">@localizer["Origin"]</span>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Contracts != null && Contracts.Count() > 0)
                        {
                            foreach (var item in Contracts)
                            {
                                string possitiveStyle = item.TotalAmountOb > 0 ? "background-color: #a9f7a9;" : "";
                                <tr style="@possitiveStyle">
                                    <td>@item.Id</td>
                                    <td>@item.MainParticipantId</td>
                                    <td>@item.NumParticipants</td>
                                    <td>@(item.TotalAmountOb?.ToString("c", CultureInfo.CreateSpecificCulture("es-ES")))</td>
                                    <td>@(item.MaturityPrincipalBalance?.ToString("c", CultureInfo.CreateSpecificCulture("es-ES")))</td>
                                    <td>@(item.OutstandingPrincipalBalance?.ToString("c", CultureInfo.CreateSpecificCulture("es-ES")))</td>
                                    <td>@item.OriginationDate</td>
                                    <td>@item.MaturityDate</td>
                                    <td>@item.FirstUnpaidInstalmentDate</td>
                                    <td>@(item.JudicialProcess != null && (sbyte)item.JudicialProcess == 1 ? "Yes" : "No")</td>
                                    <td></td>
                                    <td>@item.OriginalEntity</td>
                                    <td></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<Contract> Contracts { get; set; }

    private string currentContractsSortColumn;
    private bool isContractsSortedAscending;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setScrollTopWidth");
        }
    }

	private void SortContractsTable(string columnName)
    {
        var items = Contracts;

        if (columnName != currentContractsSortColumn)
        {
            items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            currentContractsSortColumn = columnName;
            isContractsSortedAscending = true;
        }
        else
        {
            if (isContractsSortedAscending)
            {
                items = items.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            isContractsSortedAscending = !isContractsSortedAscending;
        }

        Contracts = items;

        StateHasChanged();
    }

    private string GetContractsSortStyle(string columnName)
    {
        if (currentContractsSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isContractsSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private async void OnTopScroll(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("onTopScroll");
    }

    private async void OnScroll(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("onScroll");
    }
}
