@page "/portfolioMarket"
@using PMaP.Data
@using PMaP.Models
@using System.Globalization
@inject PortfolioService PortfolioService
@inject IJSRuntime JSRuntime

<div class="col-md-12">
    <ul class="page-breadcrumb breadcrumb">
        <li>
            <p style="color:#336699;">Portfolio market</p>
        </li>
    </ul>
</div>

<div class="row">
    <div class="col mts">
        <div class="col-md-12">
            <div id="tableTopScroll" style="overflow-x: auto; overflow-y: hidden; border: none 0px RED;" @onscroll="OnTopScroll">
                <div style="width: 1770px; overflow-x: hidden; overflow-y: hidden; height:20px;"></div>
            </div>
            <div style="overflow-x: hidden; overflow-y: hidden; border: none 0px RED;">
                <div id="tableView" style="overflow-y: auto;" @onscroll="OnScroll">
                    <table class="table table-striped table-bordered table-condensed" style="background-color:#e6e6e6;">
                        <thead>
                            <tr class="heading" style="color:#336699;">
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("HolderEntity"))">Holder Entity</span>
                                    <span class="fa @(GetSortStyle("HolderEntity"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("Investor"))">Investor</span>
                                    <span class="fa @(GetSortStyle("Investor"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("Portfolio1"))">Portfolio</span>
                                    <span class="fa @(GetSortStyle("Portfolio1"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("Subportfolio"))">Subportfolio</span>
                                    <span class="fa @(GetSortStyle("Subportfolio"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("ClosingOb"))">Nominal value</span>
                                    <span class="fa @(GetSortStyle("ClosingOb"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("Tipology"))">Contract Type</span>
                                    <span class="fa @(GetSortStyle("Tipology"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("Year"))">Year</span>
                                    <span class="fa @(GetSortStyle("Year"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("Contracts"))">Contracts</span>
                                    <span class="fa @(GetSortStyle("Contracts"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("Status"))">Status</span>
                                    <span class="fa @(GetSortStyle("Status"))"></span>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <input @onchange="OnHolderEntityChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnInvestorChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnPortfolioChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnSubportfolioChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnClosingObChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnTipologyChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnYearChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnContractsChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnStatusChanged" />
                                </td>
                            </tr>
                            @if (portfolioModel.Documents != null && portfolioModel.Documents.Count() > 0)
                            {
                                foreach (var item in portfolioModel.Documents)
                                {
                                    <tr>
                                        <td>@item.HolderEntity</td>
                                        <td>@item.Investor</td>
                                        <td>@item.Portfolio1</td>
                                        <td>@item.Subportfolio</td>
                                        <td>@(item.ClosingOb?.ToString("c", CultureInfo.CreateSpecificCulture("es-ES")))</td>
                                        <td>@item.Tipology</td>
                                        <td>@item.Year</td>
                                        <td>@item.Contracts</td>
                                        <td>@item.Status</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PortfolioModel portfolioModel = new PortfolioModel();

    private bool isSortedAscending;
    private string currentSortColumn;
    private string holderEntity, investor, portfolio, subportfolio, tipology, status;
    private decimal closingOb;
    private int year, contracts;

    protected override async Task OnInitializedAsync()
    {
        portfolioModel = await PortfolioService.Portfolios("");
    }

    private string GetSortStyle(string columnName)
    {
        if (currentSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private void SortTable(string columnName)
    {
        var items = portfolioModel.Documents;

        if (columnName != currentSortColumn)
        {
            items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            currentSortColumn = columnName;
            isSortedAscending = true;
        }
        else
        {
            if (isSortedAscending)
            {
                items = items.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            isSortedAscending = !isSortedAscending;
        }

        portfolioModel.Documents = items;

        StateHasChanged();
    }

    private async void OnHolderEntityChanged(ChangeEventArgs e)
    {
        holderEntity = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnInvestorChanged(ChangeEventArgs e)
    {
        investor = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnPortfolioChanged(ChangeEventArgs e)
    {
        portfolio = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnSubportfolioChanged(ChangeEventArgs e)
    {
        subportfolio = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnClosingObChanged(ChangeEventArgs e)
    {
        closingOb = 0;
        decimal.TryParse(e.Value.ToString(), out closingOb);
        await PortfolioFilteringList();
    }

    private async void OnTipologyChanged(ChangeEventArgs e)
    {
        tipology = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnYearChanged(ChangeEventArgs e)
    {
        year = 0;
        int.TryParse(e.Value.ToString(), out year);
        await PortfolioFilteringList();
    }

    private async void OnContractsChanged(ChangeEventArgs e)
    {
        contracts = 0;
        int.TryParse(e.Value.ToString(), out contracts);
        await PortfolioFilteringList();
    }

    private async void OnStatusChanged(ChangeEventArgs e)
    {
        status = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async Task PortfolioFilteringList()
    {
        string queryStrings = "?isTableFilter=true";

        if (!string.IsNullOrEmpty(holderEntity))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "holderEntity=" + holderEntity;
        if (!string.IsNullOrEmpty(investor))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "investor=" + investor;
        if (!string.IsNullOrEmpty(portfolio))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "portfolio=" + portfolio;
        if (!string.IsNullOrEmpty(subportfolio))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "subportfolio=" + subportfolio;
        if (closingOb > 0)
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "closingOB=" + closingOb;
        if (!string.IsNullOrEmpty(tipology))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "typology=" + tipology;
        if (year > 0)
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "year=" + year;
        if (contracts > 0)
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "contracts=" + contracts;
        if (!string.IsNullOrEmpty(status))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "status=" + status;

        portfolioModel = await PortfolioService.Portfolios(queryStrings);

        StateHasChanged();
    }

    private async void OnTopScroll(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("onTopScroll");
    }

    private async void OnScroll(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("onScroll");
    }
}
