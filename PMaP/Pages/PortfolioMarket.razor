@page "/portfolioMarket"
@using PMaP.Data
@using PMaP.Models
@using System.Globalization
@inject PortfolioMarketService PortfolioMarketService
@inject IJSRuntime JSRuntime

<div class="col-md-12">
    <ul class="page-breadcrumb breadcrumb">
        <li>
            <p style="color:#336699;">Portfolio market</p>
        </li>
    </ul>
</div>

<div class="row">
    <div class="col mts">
        <div class="col-md-12">
            <div id="tableTopScroll" style="overflow-x: auto; overflow-y: hidden; border: none 0px RED;" @onscroll="OnTopScroll">
                <div style="width: 1310px; overflow-x: hidden; overflow-y: hidden; height:20px;"></div>
            </div>
            <div style="overflow-x: hidden; overflow-y: hidden; border: none 0px RED;">
                    <div id="tableView" style="overflow-y: auto;" @onscroll="OnScroll">
                        <table class="table table-striped table-bordered table-condensed" style="background-color:#e6e6e6;">
                            <thead>
                                <tr class="heading" style="color:#336699;">
                                    <th>
                                        <span class="sort-link" @onclick="@(() => SortTable("Holder"))">Holder</span>
                                        <span class="fa @(GetSortStyle("Holder"))"></span>
                                    </th>
                                    <th>
                                        <span class="sort-link" @onclick="@(() => SortTable("Project"))">Project</span>
                                        <span class="fa @(GetSortStyle("Project"))"></span>
                                    </th>
                                    <th>
                                        <span class="sort-link" @onclick="@(() => SortTable("investor"))">investor</span>
                                        <span class="fa @(GetSortStyle("investor"))"></span>
                                    </th>
                                    <th>
                                        <span class="sort-link" @onclick="@(() => SortTable("Year"))">Year</span>
                                        <span class="fa @(GetSortStyle("Year"))"></span>
                                    </th>
                                    <th>
                                        <span class="sort-link" @onclick="@(() => SortTable("Typology"))">Typology</span>
                                        <span class="fa @(GetSortStyle("Typology"))"></span>
                                    </th>
                                    <th>
                                        <span class="sort-link" @onclick="@(() => SortTable("DebtType"))">DebtType</span>
                                        <span class="fa @(GetSortStyle("DebtType"))"></span>
                                    </th>
                                    <th>
                                        <span class="sort-link" @onclick="@(() => SortTable("Value"))">Value</span>
                                        <span class="fa @(GetSortStyle("Value"))"></span>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <input @onchange="OnHolderChanged" />
                                    </td>
                                    <td>
                                        <input @onchange="OnProjectChanged" />
                                    </td>
                                    <td>
                                        <input @onchange="OninvestorChanged" />
                                    </td>
                                    <td>
                                        <input @onchange="OnYearChanged" />
                                    </td>
                                    <td>
                                        <input @onchange="OnTypologyChanged" />
                                    </td>
                                    <td>
                                        <input @onchange="OnDebtTypeChanged" />
                                    </td>
                                    <td>
                                        <input @onchange="OnValueChanged" />
                                    </td>
                                </tr>
                                @if (portfolioMarketModel.PortfolioMarkets != null && portfolioMarketModel.PortfolioMarkets.Count() > 0)
                                {
                                    foreach (var item in portfolioMarketModel.PortfolioMarkets)
                                    {
                                        <tr>
                                            <td>@item.Holder</td>
                                            <td>@item.Project</td>
                                            <td>@item.Investor</td>
                                            <td>@item.Year</td>
                                            <td>@item.Typology</td>
                                            <td>@item.DebtType</td>
                                            <td>@item.Value</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PortfolioMarketModel portfolioMarketModel = new PortfolioMarketModel();

    private bool isSortedAscending;
    private string currentSortColumn;
    private string Holder, Project, investor, year, Typology, DebtType, Value;


    protected override async Task OnInitializedAsync()
    {
        portfolioMarketModel = await PortfolioMarketService.Portfolios("");
    }

    private string GetSortStyle(string columnName)
    {
        if (currentSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private void SortTable(string columnName)
    {
        var items = portfolioMarketModel.PortfolioMarkets;

        if (columnName != currentSortColumn)
        {
            items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            currentSortColumn = columnName;
            isSortedAscending = true;
        }
        else
        {
            if (isSortedAscending)
            {
                items = items.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            isSortedAscending = !isSortedAscending;
        }

        portfolioMarketModel.PortfolioMarkets = items;

        StateHasChanged();
    }

    private async void OnHolderChanged(ChangeEventArgs e)
    {
        Holder = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnProjectChanged(ChangeEventArgs e)
    {
        Project = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OninvestorChanged(ChangeEventArgs e)
    {
        investor = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnYearChanged(ChangeEventArgs e)
    {
        year = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnTypologyChanged(ChangeEventArgs e)
    {
        Typology = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnDebtTypeChanged(ChangeEventArgs e)
    {
        DebtType = e.Value.ToString();
        await PortfolioFilteringList();
    }


    private async void OnValueChanged(ChangeEventArgs e)
    {
        Value = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async Task PortfolioFilteringList()
    {
        string queryStrings = "?isTableFilter=true";

        if (!string.IsNullOrEmpty(Holder))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "Holder=" + Holder;
        if (!string.IsNullOrEmpty(Project))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "Project=" + Project;
        if (!string.IsNullOrEmpty(investor))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "investor=" + investor;
        if (!string.IsNullOrEmpty(Typology))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "Tipology=" + Typology;
        if (!string.IsNullOrEmpty(DebtType))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "DebtType=" + DebtType;
        if (!string.IsNullOrEmpty(Value))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "Value=" + Value;
        if (!string.IsNullOrEmpty(year))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "Year=" + year;
        
        portfolioMarketModel = await PortfolioMarketService.Portfolios(queryStrings);

        StateHasChanged();
    }

    private async void OnTopScroll(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("onTopScroll");
    }

    private async void OnScroll(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("onScroll");
    }
}
