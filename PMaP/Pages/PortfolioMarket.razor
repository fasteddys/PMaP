@page "/portfolioMarket"
@using ChartJs.Blazor.LineChart
@using PMaP.Data
@using PMaP.Models
@using System.Globalization
@using System.Net
@inject IJSRuntime JSRuntime
@inject IPortfolioMarketService PortfolioMarketService
@inject IStringLocalizer<PortfolioMarket> localizer
@inject NavigationManager NavigationManager

@*<div class="col-md-12">
    <ul class="page-breadcrumb breadcrumb">
        <li>
            <p style="color:#336699;">@localizer["lblPortfolioMarket"]</p>
        </li>
    </ul>
</div>*@

@if (portfolioMarketModel.PortfolioMarkets == null)
{
    <div class="spinner"></div>
}
else
{
    <Chart Config="_config" Width="40" Height="10"></Chart>
    <EditForm Model=@portfolioMarketModel OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
        <div class="row">
            <div class="col">
                <div class="col-md-12">
                    <div class="col-md-2">
                        <label>@localizer["YearsFrom"]</label>
                        <InputNumber class="form-control" @bind-Value="@portfolioMarketModel.ViewModel.YearFrom" />
                    </div>
                    <div class="col-md-2">
                        <label>@localizer["YearsTo"]</label>
                        <InputNumber class="form-control" @bind-Value="@portfolioMarketModel.ViewModel.YearTo" />
                    </div>
                    <div class="col-md-2">
                        <label>@localizer["ValuesFrom"]</label>
                        <InputNumber class="form-control" @bind-Value="@portfolioMarketModel.ViewModel.ValueFrom" />
                    </div>
                    <div class="col-md-2">
                        <label>@localizer["ValuesTo"]</label>
                        <InputNumber class="form-control" @bind-Value="@portfolioMarketModel.ViewModel.ValueTo" />
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-primary" style="margin-top: 22.5px;">@localizer["Filter"]</button>
                        <button type="submit" class="btn btn-secondary" style="margin-top: 22.5px;" @onclick="Clear">@localizer["Clear"]</button>
                    </div>
                </div>
            </div>  
        </div>
    </EditForm>
    <br />
    <div class="row">
        <div class="col mts">
            <div class="col-md-12">
                <div class="table-responsive">
                    <table class="table">
                        <thead class="thead-dark">
                            <tr>
                                <th>
                                    <span>@localizer["Holder"]</span>
                                    <span class="fa @(GetSortStyle("Holder"))" @onclick="@(() => SortTable("Holder"))"></span>
                                </th>
                                <th>
                                    <span>@localizer["Project"]</span>
                                    <span class="fa @(GetSortStyle("Project"))" @onclick="@(() => SortTable("Project"))"></span>
                                </th>
                                <th>
                                    <span>@localizer["Investor"]</span>
                                    <span class="fa @(GetSortStyle("Investor"))" @onclick="@(() => SortTable("Investor"))"></span>
                                </th>
                                <th>
                                    <span>@localizer["Year"]</span>
                                    <span class="fa @(GetSortStyle("YearFrom"))" @onclick="@(() => SortTable("YearFrom"))"></span>
                                </th>
                                <th>
                                    <span>@localizer["Typology"]</span>
                                    <span class="fa @(GetSortStyle("Typology"))" @onclick="@(() => SortTable("Typology"))"></span>
                                </th>
                                <th>
                                    <span>@localizer["DebtType"]</span>
                                    <span class="fa @(GetSortStyle("DebtType"))" @onclick="@(() => SortTable("DebtType"))"></span>
                                </th>
                                <th>
                                    <span>@localizer["Value"]</span>
                                    <span class="fa @(GetSortStyle("Value"))" @onclick="@(() => SortTable("Value"))"></span>
                                </th>
                            </tr>
                        </thead>
                        <tbody style="background-color: white;">
                            @*<tr>
                                <td>
                                    <input @onchange="OnHolderChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnProjectChanged" />
                                </td>
                                <td>
                                    <input @onchange="OninvestorChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnYearChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnTypologyChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnDebtTypeChanged" />
                                </td>
                                <td>
                                    <input @onchange="OnValueChanged" />
                                </td>
                            </tr>*@
                            @if (portfolioMarketModel.PortfolioMarkets != null && portfolioMarketModel.PortfolioMarkets.Count() > 0)
                            {
                                foreach (var item in portfolioMarketModel.PortfolioMarkets)
                                {
                                    string[] investors = item.Investor.Split("/");
                                    string[] investorIcons = item.InvestorLogo?.Split(";");
                                    <tr>
                                        <td><img class="img-circle" src="@item.HolderLogo" style="width: 30px;" /> @item.Holder</td>
                                        <td>@item.Project</td>
                                        <td>
                                            @for (int i = 0; i < investors.Length; i++)
                                            {
                                                @if (investorIcons != null && !string.IsNullOrEmpty(investorIcons[i]))
                                                {
                                                    <img class="img-circle" src="@investorIcons[i]" style="width: 30px;" />
                                                }
                                                @investors[i]
                                                @if ((i + 1) < investors.Length)
                                                {
                                                    <span>/</span>
                                                }
                                            }
                                        </td>
                                        <td>
                                            @(item.YearFrom?.ToString() + (item.YearTo != null ? "-" + item.YearTo?.ToString().Substring(2) : ""))
                                            @{
                                                string status = localizer["Open"];
                                                string statusClass = "badge badge-primary";
                                                if (item.Status != null && item.Status == 1)
                                                {
                                                    status = localizer["Closed"];
                                                    statusClass = "badge badge-secondary";
                                                }
                                            }
                                            <span class="@statusClass">@status</span>
                                        </td>
                                        <td>@item.Typology</td>
                                        <td>
                                            @{
                                                string debtTypeClass = "";
                                                if (item.DebtType.ToLower() == "secured")
                                                {
                                                    debtTypeClass = "bg-success";
                                                }
                                                if (item.DebtType.ToLower() == "unsecured")
                                                {
                                                    debtTypeClass = "bg-danger";
                                                }
                                                if (item.DebtType.ToLower() == "secured & unsecured")
                                                {
                                                    debtTypeClass = "bg-warning";
                                                }
                                            }
                                            <span class="text-white @debtTypeClass" style="border-radius: 5px; padding: 5px;">@item.DebtType</span>
                                        </td>
                                        <td>
                                            @{
                                                CultureInfo cultureInfo = new CultureInfo("es-ES");
                                                string value = item.Value?.ToString("c", cultureInfo);
                                                var shortValue = item.Value / 1000000;
                                                if (shortValue != null)
                                                {
                                                    string format = item.Value % 1000000 == 0 ? "#,##0" : "#,##0.00";
                                                    value = shortValue?.ToString(format, cultureInfo) + "M €";
                                                }
                                            }
                                            @value
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private PortfolioMarketModel portfolioMarketModel = new PortfolioMarketModel();

    private bool isSortedAscending;
    private string currentSortColumn;
    private string Holder, Project, investor, year, Typology, DebtType, Value;

    private LineConfig _config;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            portfolioMarketModel = await PortfolioMarketService.Portfolios("");
            InitializeGraph();
            LoadDataToGraph();
            StateHasChanged();
        }
    }

    private string GetSortStyle(string columnName)
    {
        if (currentSortColumn != columnName)
        {
            return "fa-unsorted";
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private void SortTable(string columnName)
    {
        var items = portfolioMarketModel.PortfolioMarkets;

        if (columnName != currentSortColumn)
        {
            items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            currentSortColumn = columnName;
            isSortedAscending = true;
        }
        else
        {
            if (isSortedAscending)
            {
                items = items.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            isSortedAscending = !isSortedAscending;
        }

        portfolioMarketModel.PortfolioMarkets = items;

        StateHasChanged();
    }

    private async void OnHolderChanged(ChangeEventArgs e)
    {
        Holder = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnProjectChanged(ChangeEventArgs e)
    {
        Project = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OninvestorChanged(ChangeEventArgs e)
    {
        investor = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnYearChanged(ChangeEventArgs e)
    {
        year = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnTypologyChanged(ChangeEventArgs e)
    {
        Typology = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async void OnDebtTypeChanged(ChangeEventArgs e)
    {
        DebtType = e.Value.ToString();
        await PortfolioFilteringList();
    }


    private async void OnValueChanged(ChangeEventArgs e)
    {
        Value = e.Value.ToString();
        await PortfolioFilteringList();
    }

    private async Task PortfolioFilteringList()
    {
        string queryStrings = "?isTableFilter=true";

        if (!string.IsNullOrEmpty(Holder))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "Holder=" + Holder;
        if (!string.IsNullOrEmpty(Project))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "Project=" + Project;
        if (!string.IsNullOrEmpty(investor))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "investor=" + investor;
        if (!string.IsNullOrEmpty(Typology))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "Tipology=" + Typology;
        if (!string.IsNullOrEmpty(DebtType))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "DebtType=" + DebtType;
        if (!string.IsNullOrEmpty(Value))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "Value=" + Value;
        if (!string.IsNullOrEmpty(year))
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "Year=" + year;
        if (portfolioMarketModel.ViewModel.YearFrom != null)
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "YearFrom=" + portfolioMarketModel.ViewModel.YearFrom;
        if (portfolioMarketModel.ViewModel.YearTo != null)
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "YearTo=" + portfolioMarketModel.ViewModel.YearTo;
        if (portfolioMarketModel.ViewModel.ValueFrom != null)
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "ValueFrom=" + portfolioMarketModel.ViewModel.ValueFrom;
        if (portfolioMarketModel.ViewModel.ValueTo != null)
            queryStrings += (!string.IsNullOrEmpty(queryStrings) ? "&" : "?") + "ValueTo=" + portfolioMarketModel.ViewModel.ValueTo;

        var viewModel = portfolioMarketModel.ViewModel;
        portfolioMarketModel = await PortfolioMarketService.Portfolios(queryStrings);
        LoadDataToGraph();
        portfolioMarketModel.ViewModel = viewModel;

        currentSortColumn = null;

        StateHasChanged();
    }

    private async void OnTopScroll(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("onTopScroll");
    }

    private async void OnScroll(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("onScroll");
    }

    private async void ValidFormSubmitted(EditContext editContext)
    {
        await PortfolioFilteringList();
    }

    private void InvalidFormSubmitted(EditContext editContext)
    {

    }

    private void Clear()
    {
        portfolioMarketModel.ViewModel.YearFrom = null;
        portfolioMarketModel.ViewModel.YearTo = null;
        portfolioMarketModel.ViewModel.ValueFrom = null;
        portfolioMarketModel.ViewModel.ValueTo = null;
        StateHasChanged();
    }

    private void InitializeGraph()
    {
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Display = true,
                    Position = ChartJs.Blazor.Common.Enums.Position.Right
                }
            }
        };
    }

    private void LoadDataToGraph()
    {
        if (portfolioMarketModel.PortfolioMarkets != null && portfolioMarketModel.PortfolioMarkets.Count > 0)
        {
            _config.Data.Labels.Clear();
            var years = portfolioMarketModel.PortfolioMarkets
                .Where(x => !string.IsNullOrEmpty(x.Investor) && x.Investor.ToLower() != "sacado a mercado" && x.YearFrom != null)
                .OrderBy(x => x.YearFrom)
                .GroupBy(x => x.YearFrom)
                .Select(x => new { YearFrom = x.Key.Value })
                .ToList();
            foreach (var year in years)
            {
                _config.Data.Labels.Add(year.YearFrom.ToString());
            }

            var portfolioMarkets = portfolioMarketModel.PortfolioMarkets
                .Where(x => !string.IsNullOrEmpty(x.Investor) && x.Investor.ToLower() != "sacado a mercado" && x.YearFrom != null)
                .GroupBy(x => new { x.Holder, x.YearFrom })
                .Select(x => new
                {
                    x.Key.Holder,
                    x.Key.YearFrom,
                    Value = x.Sum(x => x.Value)
                })
                .ToList();

            _config.Data.Datasets.Clear();
            var holders = portfolioMarkets.OrderBy(x => x.Holder).GroupBy(x => new { x.Holder }).Select(x => new { x.Key.Holder } ).ToList();
            foreach (var holder in holders)
            {
                decimal[] data = new decimal[years.Count];
                for (var i = 0; i < years.Count; i++)
                {
                    var portfolioMarket = portfolioMarkets.Where(x => x.Holder == holder.Holder && x.YearFrom == years[i].YearFrom).FirstOrDefault();
                    data[i] = portfolioMarket != null ? portfolioMarket.Value ?? 0 : 0;
                }

                Random rnd = new Random();
                var r = rnd.Next(0, 255);
                var g = rnd.Next(0, 255);
                var b = rnd.Next(0, 255);
                string backgroundColor = ColorUtil.ColorHexString((byte)r, (byte)g, (byte)b);
                string[] backgroundColors = new string[years.Count];
                for (var i = 0; i < backgroundColors.Count(); i++)
                {
                    backgroundColors[i] = backgroundColor;
                }

                LineDataset<decimal> dataset = new LineDataset<decimal>(data)
                {
                    PointBackgroundColor = backgroundColors,
                    PointBorderColor = backgroundColors,
                    BackgroundColor = backgroundColor,
                    Label = holder.Holder,
                    ShowLine = true
                };

                _config.Data.Datasets.Add(dataset);
            }
        }
    }
}
