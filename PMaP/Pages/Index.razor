@page "/"

@using Blazored.SessionStorage
@using PMaP.Data
@using PMaP.Models
@using System.Globalization
@using System.Net
@using PMaP.Models.Authenticate
@inject IHomeService HomeService
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService
@inject ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager

<div class="col-md-12">
    <ul class="page-breadcrumb breadcrumb">
        <li>
            <p style="color:#336699;">Home</p>
        </li>
    </ul>
</div>

<div class="col-md-12">
    <div class="Tabs" style="display: block;">       
	    <ul class="nav nav-tabs">
		    <li class="active">
			    <a href="">General characteristics</a>
		    </li>
		    <li class="">
			    <a href="#">Portfolio Composition</a>
		    </li>
	    </ul>
    </div>
</div>

<div class="row">
    <div class="col mts">
        <div class="col-md-12">
            <div id="tableTopScroll" style="overflow-x: auto; overflow-y: hidden; border: none 0px RED;" @onscroll="OnTopScroll">
                <div style="width: 950px; overflow-x: hidden; overflow-y: hidden; height:20px;"></div>
            </div>
            <div style="overflow-x: hidden; overflow-y: hidden; border: none 0px RED;">
                <div id="tableView" style="overflow-y: auto;" @onscroll="OnScroll">
                    <table class="table table-striped table-bordered table-condensed" style="background-color:#e6e6e6;">
                        <thead>
                            <tr class="heading" style="color:#336699;">
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("portfolio"))">Portfolio</span>
                                    <span class="fa @(GetSortStyle("portfolio"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("subportfolio"))">Subportfolio</span>
                                    <span class="fa @(GetSortStyle("subportfolio"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("nominalValue"))">Nominal value</span>
                                    <span class="fa @(GetSortStyle("nominalValue"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("secured"))">Secured</span>
                                    <span class="fa @(GetSortStyle("secured"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("unsecured"))">Unsecured</span>
                                    <span class="fa @(GetSortStyle("unsecured"))"></span>
                                </th>
				                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("debtType"))">Debt type</span>
                                    <span class="fa @(GetSortStyle("debtType"))"></span>
                                </th> 
				                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("priceSecured"))">Price secured</span>
                                    <span class="fa @(GetSortStyle("priceSecured"))"></span>
                                </th>
				                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("unsecuredPrice"))">Unsecured price</span>
                                    <span class="fa @(GetSortStyle("unsecuredPrice"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("assignmentEntity"))">Assignment entity</span>
                                    <span class="fa @(GetSortStyle("assignmentEntity"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("acquisitionYear"))">Acquisition Year</span>
                                    <span class="fa @(GetSortStyle("acquisitionYear"))"></span>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (model != null && model.Documents != null && model.Documents.Count() > 0)
                            {
                                foreach (var item in model.Documents)
                                {
                                    <tr>
                                        <td>@item.Portfolio</td>
                                        <td>@item.Subportfolio</td>
                                        <td>@(item.NominalValue?.ToString("c", CultureInfo.CreateSpecificCulture("es-ES")))</td>
                                        <td>@(item.Secured?.ToString("c", CultureInfo.CreateSpecificCulture("es-ES")))</td>
                                        <td>@(item.Unsecured?.ToString("c", CultureInfo.CreateSpecificCulture("es-ES")))</td>
                                        <td>@item.DebtType</td>
                                        <td>@(item.PriceSecured?.ToString("c", CultureInfo.CreateSpecificCulture("es-ES")))</td>
                                        <td>@(item.UnsecuredPrice?.ToString("c", CultureInfo.CreateSpecificCulture("es-ES")))</td>
                                        <td>@item.AssignmentEntity</td>
                                        <td>@item.AcquisitionYear</td>
                                    </tr>
                                }
                            }
                        </tbody>
	                </table>                       
                </div>
            </div>
        </div>
	</div>
</div>

@code {
    private HomeModel model;

    private bool isSortedAscending;
    private string currentSortColumn;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            model = await HomeService.PortfolioComposition();
            StateHasChanged();
        }
    }

    private string GetSortStyle(string columnName)
    {
        if (currentSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private void SortTable(string columnName)
    {
        var items = model.Documents;

        if (columnName != currentSortColumn)
        {
            //We need to force order by descending on the new column
            items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            currentSortColumn = columnName;
            isSortedAscending = true;
        }
        else //Sorting against same column but in different direction
        {
            if (isSortedAscending)
            {
                items = items.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            isSortedAscending = !isSortedAscending;
        }

        model.Documents = items;

        StateHasChanged();
    }

    private async void OnTopScroll(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("onTopScroll");
    }

    private async void OnScroll(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("onScroll");
    }
}
