@using PMaP.Models.DBModels
@using System.Globalization
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<DetailsTable> localizer

<div class="row">
    <div class="col">
        <div class="col-md-12">
            <div id="tableTopScroll" style="overflow-x: auto; overflow-y: hidden; border: none 0px RED;" @onscroll="OnTopScroll">
                <div id="scrollTop" style="overflow-x: hidden; overflow-y: hidden; height:20px;"></div>
            </div>
            <div style="overflow-x: hidden; overflow-y: hidden; border: none 0px RED;">
                <div id="tableView" style="overflow-y: auto;" @onscroll="OnScroll">
                    <table id="tableId" class="table table-striped table-bordered" style="background-color: #e6e6e6;">
                        <thead style="position: sticky; top: 0;">
                            <tr class="heading" style="color:#336699">
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("ContractId"))">@localizer["Contract"]</span>
                                    <span class="fa @(GetSortStyle("ContractId"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("MainParticipantId"))">@localizer["Participant"]</span>
                                    <span class="fa @(GetSortStyle("MainParticipantId"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("NumParticipants"))">@localizer["NoGuarantors"]</span>
                                    <span class="fa @(GetSortStyle("NumParticipants"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("TotalAmountOb"))">@localizer["BalanceOB"]</span>
                                    <span class="fa @(GetSortStyle("TotalAmountOb"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("MaturityPrincipalBalance"))">@localizer["MaturityPrincipalBalance"]</span>
                                    <span class="fa @(GetSortStyle("MaturityPrincipalBalance"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("OutstandingPrincipalBalance"))">@localizer["OutstandingPrincipalBalance"]</span>
                                    <span class="fa @(GetSortStyle("OutstandingPrincipalBalance"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("OriginationDate"))">@localizer["OriginationDate"]</span>
                                    <span class="fa @(GetSortStyle("OriginationDate"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("MaturityDate"))">@localizer["MaturityDate"]</span>
                                    <span class="fa @(GetSortStyle("MaturityDate"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("FirstUnpaidInstalmentDate"))">@localizer["FirstUnpaidInstallmentDate"]</span>
                                    <span class="fa @(GetSortStyle("FirstUnpaidInstalmentDate"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("JudicialProcess"))">@localizer["JudicialProcess"]</span>
                                    <span class="fa @(GetSortStyle("JudicialProcess"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("Portfolio"))">@localizer["Portfolio"]</span>
                                    <span class="fa @(GetSortStyle("Portfolio"))"></span>
                                </th>
                                <th>
                                    <span class="sort-link">@localizer["TypeOfJudicialProcedure"]</span>
                                </th>
                                <th>
                                    <span class="sort-link" @onclick="@(() => SortTable("OriginalEntity"))">@localizer["AssignmentEntity"]</span>
                                    <span class="fa @(GetSortStyle("OriginalEntity"))"></span>
                                </th>
                                <th><span class="sort-link">@localizer["Origin"]</span></th>
                                <th></th>
                            </tr>
                            <tr class="heading" style="color:#336699">
                                <th>
                                    <input @onchange="OnIdChanged" />
                                </th>
                                <th>
                                    <input @onchange="OnMainParticipantIdChanged" />
                                </th>
                                <th>
                                    <input @onchange="OnNumParticipantsChanged" />
                                </th>
                                <th>
                                    <input @onchange="OnTotalAmountObChanged" />
                                </th>
                                <th>
                                    <input @onchange="OnMaturityPrincipalBalanceChanged" />
                                </th>
                                <th>
                                    <input @onchange="OnOutstandingPrincipalBalanceChanged" />
                                </th>
                                <th>
                                    <input @onchange="OnOriginationDateChanged" />
                                </th>
                                <th>
                                    <input @onchange="OnMaturityDateChanged" />
                                </th>
                                <th>
                                    <input @onchange="OnFirstUnpaidInstalmentDateChanged" />
                                </th>
                                <th>
                                    <input @onchange="OnJudicialProcessChanged" />
                                </th>
                                <th>
                                    <input @onchange="OnPortfolioChanged" />
                                </th>
                                <th>
                                    <input />
                                </th>
                                <th>
                                    <input @onchange="OnOriginalEntityChanged" />
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (FilteredContractList != null && FilteredContractList.Count() > 0)
                            {
                                foreach (var item in FilteredContractList)
                                {
                                    <tr>
                                        <td>@item.ContractId</td>
                                        <td>@(Participants.Where(x => x.ContractId == item.Id).Select(x => x.Name).FirstOrDefault())</td>
                                        <td>@item.NumParticipants</td>
                                        <td>@(item.TotalAmountOb?.ToString("c", CultureInfo.CreateSpecificCulture("es-ES")))</td>
                                        <td>@(item.MaturityPrincipalBalance?.ToString("c", CultureInfo.CreateSpecificCulture("es-ES")))</td>
                                        <td>@(item.OutstandingPrincipalBalance?.ToString("c", CultureInfo.CreateSpecificCulture("es-ES")))</td>
                                        <td>@item.OriginationDate</td>
                                        <td>@item.MaturityDate</td>
                                        <td>@item.FirstUnpaidInstalmentDate</td>
                                        <td>@(item.JudicialProcess != null && (sbyte)item.JudicialProcess == 1 ? "Yes" : "No")</td>
                                        <td>@(item.PortfolioNavigation == null ? item.Portfolio : item.PortfolioNavigation.Portfolio1)</td>
                                        <td></td>
                                        <td>@item.OriginalEntity</td>
                                        <td></td>
                                        <td>
                                            <button class="btn btn-xs btn-primary" @onclick="() => { View(item); }"><i class="fa fa-eye"></i></button>
                                            <button class="btn btn-xs btn-danger" @onclick="() => { Remove(item); }"><i class="fa fa-trash-o"></i></button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<Contract> ContractList { get; set; }
    [Parameter]
    public List<Contract> FilteredContractList { get; set; }
    [Parameter]
    public List<Participant> Participants { get; set; }
    [Parameter]
    public EventCallback<Contract> OnViewContract { get; set; }
    [Parameter]
    public EventCallback<Contract> OnRemoveContract { get; set; }

    private string currentSortColumn;
    private bool isSortedAscending;
    private string ContractId, mainParticipantId, numParticipants, totalAmountOb, maturityPrincipalBalance, outstandingPrincipalBalance, originationDate, maturityDate,
        firstUnpaidInstalmentDate, judicialProcess, portfolioFilter, originalEntity;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setScrollTopWidth");
        }
    }

    private async void OnTopScroll(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("onTopScroll");
    }

    private async void OnScroll(EventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("onScroll");
    }

    private string GetSortStyle(string columnName)
    {
        if (currentSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private void SortTable(string columnName)
    {
        var items = FilteredContractList;

        if (columnName != currentSortColumn)
        {
            //We need to force order by descending on the new column
            items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            currentSortColumn = columnName;
            isSortedAscending = true;
        }
        else //Sorting against same column but in different direction
        {
            if (isSortedAscending)
            {
                items = items.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            isSortedAscending = !isSortedAscending;
        }

        FilteredContractList = items;

        StateHasChanged();
    }

    private void OnIdChanged(ChangeEventArgs e)
    {
        ContractId = e.Value.ToString();
        ContractFilteringList();
        StateHasChanged();
    }

    private void OnMainParticipantIdChanged(ChangeEventArgs e)
    {
        mainParticipantId = e.Value.ToString();
        ContractFilteringList();
        StateHasChanged();
    }

    private void OnNumParticipantsChanged(ChangeEventArgs e)
    {
        numParticipants = e.Value.ToString();
        ContractFilteringList();
        StateHasChanged();
    }

    private void OnTotalAmountObChanged(ChangeEventArgs e)
    {
        totalAmountOb = e.Value.ToString();
        ContractFilteringList();
        StateHasChanged();
    }

    private void OnMaturityPrincipalBalanceChanged(ChangeEventArgs e)
    {
        maturityPrincipalBalance = e.Value.ToString();
        ContractFilteringList();
        StateHasChanged();
    }

    private void OnOutstandingPrincipalBalanceChanged(ChangeEventArgs e)
    {
        outstandingPrincipalBalance = e.Value.ToString();
        ContractFilteringList();
        StateHasChanged();
    }

    private void OnOriginationDateChanged(ChangeEventArgs e)
    {
        originationDate = e.Value.ToString();
        ContractFilteringList();
        StateHasChanged();
    }

    private void OnMaturityDateChanged(ChangeEventArgs e)
    {
        maturityDate = e.Value.ToString();
        ContractFilteringList();
        StateHasChanged();
    }

    private void OnFirstUnpaidInstalmentDateChanged(ChangeEventArgs e)
    {
        firstUnpaidInstalmentDate = e.Value.ToString();
        ContractFilteringList();
        StateHasChanged();
    }

    private void OnJudicialProcessChanged(ChangeEventArgs e)
    {
        judicialProcess = e.Value.ToString();
        ContractFilteringList();
        StateHasChanged();
    }

    private void OnPortfolioChanged(ChangeEventArgs e)
    {
        portfolioFilter = e.Value.ToString();
        ContractFilteringList();
        StateHasChanged();
    }

    private void OnOriginalEntityChanged(ChangeEventArgs e)
    {
        originalEntity = e.Value.ToString();
        ContractFilteringList();
        StateHasChanged();
    }

    private void ContractFilteringList()
    {
        FilteredContractList = ContractList;
        if (!string.IsNullOrEmpty(ContractId))
            FilteredContractList = ContractList.Where(x => x.ContractId.ToString().ToLower().Contains(ContractId.ToLower())).ToList();
        if (!string.IsNullOrEmpty(mainParticipantId))
            FilteredContractList = ContractList.Where(x => x.MainParticipantId.ToLower().Contains(mainParticipantId.ToLower())).ToList();
        if (!string.IsNullOrEmpty(numParticipants))
            FilteredContractList = ContractList.Where(x => x.NumParticipants.ToString().ToLower().Contains(numParticipants.ToLower())).ToList();
        if (!string.IsNullOrEmpty(totalAmountOb))
            FilteredContractList = ContractList.Where(x => x.TotalAmountOb.ToString().ToLower().Contains(totalAmountOb.ToLower())).ToList();
        if (!string.IsNullOrEmpty(maturityPrincipalBalance))
            FilteredContractList = ContractList.Where(x => x.MaturityPrincipalBalance.ToString().ToLower().Contains(maturityPrincipalBalance.ToLower())).ToList();
        if (!string.IsNullOrEmpty(outstandingPrincipalBalance))
            FilteredContractList = ContractList.Where(x => x.OutstandingPrincipalBalance.ToString().ToLower().Contains(outstandingPrincipalBalance.ToLower())).ToList();
        if (!string.IsNullOrEmpty(originationDate))
            FilteredContractList = ContractList.Where(x => x.OriginationDate.ToString().ToLower().Contains(originationDate.ToLower())).ToList();
        if (!string.IsNullOrEmpty(maturityDate))
            FilteredContractList = ContractList.Where(x => x.MaturityDate.ToString().ToLower().Contains(maturityDate.ToLower())).ToList();
        if (!string.IsNullOrEmpty(firstUnpaidInstalmentDate))
            FilteredContractList = ContractList.Where(x => x.FirstUnpaidInstalmentDate.ToString().ToLower().Contains(firstUnpaidInstalmentDate.ToLower())).ToList();
        if (!string.IsNullOrEmpty(judicialProcess))
            FilteredContractList = ContractList.Where(x => x.JudicialProcess.ToString().ToLower().Contains(judicialProcess.ToLower())).ToList();
        if (!string.IsNullOrEmpty(portfolioFilter))
            FilteredContractList = ContractList.Where(x => x.Portfolio.ToLower().Contains(portfolioFilter.ToLower())).ToList();
        if (!string.IsNullOrEmpty(originalEntity))
            FilteredContractList = ContractList.Where(x => x.OriginalEntity.ToLower().Contains(originalEntity.ToLower())).ToList();
    }

    private Task View(Contract contract)
    {
        return OnViewContract.InvokeAsync(contract);
    }

    private Task Remove(Contract contract)
    {
        return OnRemoveContract.InvokeAsync(contract);
    }
}
