@page "/portfolioValuation/{isAdd}/{portfolio}/{subportfolio}"

@using Microsoft.AspNetCore.Mvc.Rendering
@using PMaP.Data
@using PMaP.Models
@using PMaP.Models.DBModels
@using PMaP.Models.ViewModels.PortfolioValuation
@using ProtectedLocalStore
@using System.Globalization
@using System.Net
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService
@inject IPortfolioRegistrationService PortfolioRegistrationService
@inject IPortfolioValuationService PortfolioValuationService
@inject IStringLocalizer<PortfolioValuation> localizer
@inject NavigationManager NavigationManager

<div class="col-md-12">
    <ul class="page-breadcrumb breadcrumb">
        <li>
            <a style="color:#336699;">@pageBreadcrumb</a>
        </li>
    </ul>
</div>

@if (portfolioValuationModel.ViewModel.DebtOBList.Count() == 0)
{
    <div class="spinner"></div>
}
else
{
    @if (@showPortfolioDetail)
    {
        <PortfolioDetail PortfolioValuationAdd="@portfolioValuationModel.ViewModel.PortfolioValuationAdd" />
    }
    <div class="row">
        <div class="col">
            <div class="col-md-12">
                <div class="col-md-2">
                    <label>@localizer["AddedInPortfolio"]</label>
                    <select class="form-control" @bind="portfolioValuationModel.ViewModel.AddedInPortfolio">
                        @foreach (var item in portfolioValuationModel.ViewModel.AddedInPortfolioList)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>     
                </div>
            </div>
        </div>  
    </div>
    <br/>
    <div class="row">
        <div class="col">
            <div class="col-md-12">
                <div class="card card-primary" style="">
                    <div class="card-header" style="background-color:#0066ff">
                        <div class="caption">
                            <font color="white">@localizer["CharacteristicsSelection"]</font>
                        </div>
                    </div>
                    <div class="card-body" style="background-color:#e6f0ff">
                        <div class="row">
                            <div class="col-md-3">          
                                <label>@localizer["From"]</label>
                                <input class="form-control must-field" type="date" @bind="portfolioValuationModel.ViewModel.From" @bind:format="yyyy-MM-dd">
                            </div>
                            <div class="col-md-3">          
                                <label>@localizer["To"]</label>
                                <input class="form-control must-field" type="date" @bind="portfolioValuationModel.ViewModel.To" @bind:format="yyyy-MM-dd">
                            </div>
                            <div class="col-md-2">  
                                <label>@localizer["DebtType"]</label>
                                <select class="form-control" @bind="portfolioValuationModel.ViewModel.DebtType">
                                    @foreach (var item in portfolioValuationModel.ViewModel.DebtTypeList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                            </div> 
                                <div class="col-md-2">          
                                <label>@localizer["Judicialized"]</label>
                                <select class="form-control" @bind="portfolioValuationModel.ViewModel.Judicialized">
                                    @foreach (var item in portfolioValuationModel.ViewModel.JudicializedList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>         
                            </div>
                            <div class="col-md-2">
                                <label>@localizer["Insolvency"]</label>
                                <select class="form-control" @bind="portfolioValuationModel.ViewModel.Insolvency">
                                    @foreach (var item in portfolioValuationModel.ViewModel.InsolvencyList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>     						
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-2">
                                <label>@localizer["PerformingStatus"]</label>
                                <select class="form-control" @bind="portfolioValuationModel.ViewModel.PerformingStatus">
                                    @foreach (var item in portfolioValuationModel.ViewModel.PerformingStatusList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                            </div>  
                            <div class="col-md-2">
                                <label>@localizer["DebtOB"]</label>
                                <select class="form-control" @bind="portfolioValuationModel.ViewModel.DebtOB">
                                    @foreach (var item in portfolioValuationModel.ViewModel.DebtOBList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>     
                                </div>
                            <div class="col-md-2">
                                <label>@localizer["DebtorName"]</label>
                                <input type="text" class="form-control" @bind="portfolioValuationModel.ViewModel.DebtorName">
                            </div> 
                            <div class="col-md-2">  	
                                <label>@localizer["DebtorType"]</label>
                                <select class="form-control" @bind="portfolioValuationModel.ViewModel.DebtorType">
                                    @foreach (var item in portfolioValuationModel.ViewModel.DebtorTypeList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                            </div> 
                            <div class="col-md-2">          
                                <label>@localizer["Region"]</label>
                                <select class="form-control" @bind="portfolioValuationModel.ViewModel.Region">
                                    @foreach (var item in portfolioValuationModel.ViewModel.RegionList)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>     
                            </div>
                        </div>
                        <hr style="height:0.5px; color:#e6e6e6;background-color:#cccccc;">
                        <div class="row">
                            <div class="col-md-12"> 
                                <h5>@localizer["ContractType"]:</h5>
                                @foreach (var item in portfolioValuationModel.ViewModel.ContractTypes)
                                {
                                    bool Checked = false;
                                    if (SelectedValues.Contains(item.Id))  
                                    {
                                        Checked = true;
                                    }
                                    <div class="checkbox" Height="15" Width="15">
                                        <div class="col-md-3">
                                            <label>
                                                <input type="checkbox"
                                                    Height="15"
                                                    Width="15"
                                                    checked="@Checked"
                                                    @onchange="e => { CheckboxClicked(item.Id, e.Value); }" />
                                                @item.Name
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <button class="btn btn-primary" style="position:relative;left:90%" @onclick="Summary" disabled="@loading">
                            @if (loading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            else
                            {
                                <i class="fa fa-cog"></i>
                            }
                            &nbsp;&nbsp;@localizer["Calculate"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (@showSummary)
    {
        <Assessment
            Caption="@localizer["Summary"]"
            Summary="@portfolioValuationModel.Summary"
            showDetailButton="true"
            OnDetailsClick="Details"
            showDetails="@showDetails"
            loading="@loading"
        />
    }
    @if (@showDetails)
    {
        <DetailsTable
            ContractList="@ContractList"
            FilteredContractList="@FilteredContractList"
            Participants="@portfolioValuationModel.Participants"
            OnViewContract="View"
            OnRemoveContract="Remove"
        />
        <br />
        @if (isAdd == "1")
        {
            <p align="right">
                <button class="btn  btn-primary" @onclick="UpdatePortfolio" disabled="@loading">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    else
                    {
                        <i class="fa fa-envelope"></i>
                    }
                    &nbsp;&nbsp;@localizer["Save"]
                </button>
                <button class="btn btn-danger" @onclick="Cancel">
                    <i class="fa fa-close"></i>&nbsp;&nbsp;@localizer["Cancel"]
                </button>
            </p>
        }
        else
        {
            <p align="right">
                <button class="btn btn-success" @onclick="AddPortfolio" disabled="@loading">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    else
                    {
                        <i class="fa fa-plus-square-o"></i>
                    }
                    &nbsp;&nbsp;@localizer["AddPortfolio"]
                </button>
                <button class="btn btn-primary" disabled="@loading">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    else
                    {
                        <i class="fa fa-download"></i>
                    }
                    &nbsp;&nbsp;@localizer["Perimeter"]
                </button>
            </p>
        }
    }
}

<Dialog Caption="@Caption" Message="@Message" OnClose="OnDialogClose" Type="Dialog.Category.Okay" />

@code {
    [Parameter]
    public string portfolio { get; set; }
    [Parameter]
    public string subportfolio { get; set; }
    [Parameter]
    public string isAdd {get; set;}

    private PortfolioValuationModel portfolioValuationModel { get; set; } = new PortfolioValuationModel
    {
        ViewModel = new ViewModel
        {
            DebtOBList = new List<SelectListItem>(),
            DebtorTypeList = new List<SelectListItem>(),
            DebtTypeList = new List<SelectListItem>(),
            InsolvencyList = new List<SelectListItem>(),
            JudicializedList = new List<SelectListItem>(),
            PerformingStatusList = new List<SelectListItem>(),
            RegionList = new List<SelectListItem>(),
            ContractTypes = new List<ContractType>(),
            AddedInPortfolioList = new List<SelectListItem>()
        }
    };

    private List<int> SelectedValues { get; set; } = new List<int>();

    private bool showSummary { get; set; }
    private bool showDetails { get; set; }
    private bool showPortfolioDetail { get; set; }
    private string pageBreadcrumb { get; set; }

    private List<Contract> ContractList = new List<Contract>();
    private List<Contract> FilteredContractList = new List<Contract>();

    private bool loading, toNavigateToPortfolio;

    private string Caption { get; set; }
    private string Message { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            portfolio = portfolio.Length == 1 ? portfolio.Replace("_", "") : portfolio;
            subportfolio = subportfolio.Length == 1 ? subportfolio.Replace("_", "") : subportfolio;

            portfolioValuationModel = await PortfolioValuationService.Index(portfolio, subportfolio, isAdd);
            if (portfolioValuationModel.ResponseCode == (int)HttpStatusCode.Unauthorized)
            {
                NavigationManager.NavigateTo("/account/login");
            }

            showSummary = false;
            showDetails = false;
            toNavigateToPortfolio = false;
            showPortfolioDetail = isAdd == "1" ? true : false;
            pageBreadcrumb = isAdd == "1" ? localizer["PortfolioEvaluationAddContracts"] : localizer["lblPortfolioEvaluation"];

            StateHasChanged();
        }
    }

    private void CheckboxClicked(int aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
        StateHasChanged();
    }

    private async void Summary()
    {
        loading = true;
        portfolioValuationModel.ViewModel.ContractTypes.ForEach(x => x.IsSelected = false);
        portfolioValuationModel.ViewModel.ContractTypes.Where(x => SelectedValues.Contains(x.Id)).ToList().ForEach(x => x.IsSelected = true);
        portfolioValuationModel.ViewModel.ReflectExcludedContractIds = false;
        portfolioValuationModel.ViewModel.ExcludePossitiveOB = true;
        portfolioValuationModel = await PortfolioValuationService.Summary(portfolioValuationModel);
        if (portfolioValuationModel.ResponseCode == (int)HttpStatusCode.Unauthorized)
        {
            NavigationManager.NavigateTo("/account/login");
        }
        showSummary = true;
        showDetails = false;
        loading = false;
        StateHasChanged();
    }

    private async void Details()
    {
        if (!showDetails)
        {
            loading = true;
            portfolioValuationModel.ViewModel.ExcludedContractIds = new List<int>();
            portfolioValuationModel.ViewModel.ExcludePossitiveOB = true;
            portfolioValuationModel = await PortfolioValuationService.Details(portfolioValuationModel);
            if (portfolioValuationModel.ResponseCode == (int)HttpStatusCode.Unauthorized)
            {
                NavigationManager.NavigateTo("/account/login");
            }
            ContractList = FilteredContractList = portfolioValuationModel.Contracts;
            loading = false;
        }
        showDetails = showDetails ? false : true;
        StateHasChanged();
    }

    private async void AddPortfolio()
    {
        loading = true;
        var inPortfolio = portfolioValuationModel.Contracts.FirstOrDefault(x => x.PortfolioNavigation != null && x.PortfolioNavigation.OperationType == "SALE");
        if (inPortfolio != null)
        {
            Caption = localizer["Warning"];
            Message = localizer["WarningMessage"];
            await JSRuntime.InvokeVoidAsync("openDialog");

            loading = false;
            StateHasChanged();
            return;
        }
        await LocalStorageService.SetItem("portfolioValuationViewModel", portfolioValuationModel.ViewModel);
        NavigationManager.NavigateTo("/portfolios/1");
    }

    private void View(Contract contract)
    {

    }

    private void Remove(Contract contract)
    {
        portfolioValuationModel.Contracts.Remove(contract);
        portfolioValuationModel.ViewModel.ExcludedContractIds.Add(contract.Id);
        StateHasChanged();
    }

    private async void UpdatePortfolio()
    {
        loading = true;
        var inPortfolio = portfolioValuationModel.Contracts.FirstOrDefault(x => x.PortfolioNavigation.OperationType == "SALE");
        if (inPortfolio != null)
        {
            Caption = localizer["Warning"];
            Message = localizer["WarningMessage"];
            await JSRuntime.InvokeVoidAsync("openDialog");

            loading = false;
            StateHasChanged();
            return;
        }
        foreach (var contract in portfolioValuationModel.Contracts)
        {
            contract.Investors = portfolioValuationModel.Investors.Where(x => x.ContractId == contract.Id).ToList();
            contract.Participants = portfolioValuationModel.Participants.Where(x => x.ContractId == contract.Id).ToList();
            contract.Procedures = portfolioValuationModel.Procedures.Where(x => x.ContractId == contract.Id).ToList();
        }
        var updatePortfolioResponse = await PortfolioRegistrationService.UpdatePortfolio(portfolioValuationModel);
        if (updatePortfolioResponse.ResponseCode == (int)HttpStatusCode.Unauthorized)
        {
            NavigationManager.NavigateTo("/account/login");
        }
        if (updatePortfolioResponse.ResponseCode == 200)
        {
            Caption = localizer["Success"];
            Message = localizer["SuccessMessage"];
            await JSRuntime.InvokeVoidAsync("openDialog");

            loading = false;
            toNavigateToPortfolio = true;
            StateHasChanged();
            return;
        }
        string title;
        switch (updatePortfolioResponse.ResponseCode)
        {
            case 400:
                title = localizer["Warning"];
                break;
            case 500:
                title = localizer["Error"];
                break;
            default:
                title = "";
                break;
        }
        Caption = title;
        Message = updatePortfolioResponse.Message;
        await JSRuntime.InvokeVoidAsync("openDialog");

        loading = false;
        StateHasChanged();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/portfolios/0");
    }

    private void OnDialogClose(bool isOk)
    {
        if (toNavigateToPortfolio)
        {
            Cancel();
        }
    }
}
