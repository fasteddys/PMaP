@page "/portfolioValuation/{isAdd}/{portfolio}/{subportfolio}"

@using Blazored.SessionStorage
@using Microsoft.AspNetCore.Mvc.Rendering
@using PMaP.Data
@using PMaP.Models
@using PMaP.Models.DBModels
@using PMaP.Models.ViewModels.PortfolioValuation
@using ProtectedLocalStore
@using System.Globalization
@using System.Net
@inject IPortfolioRegistrationService PortfolioRegistrationService
@inject IPortfolioValuationService PortfolioValuationService
@inject NavigationManager NavigationManager
@inject ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntime

<div class="col-md-12">
    <ul class="page-breadcrumb breadcrumb">
        <li>
            <a style="color:#336699;">@pageBreadcrumb</a>
        </li>
    </ul>
</div>
@if (@showPortfolioDetail)
{
    <PortfolioDetail PortfolioValuationAdd="@portfolioValuationModel.ViewModel.PortfolioValuationAdd" />
}
<div class="row">
    <div class="col">
        <div class="col-md-12">
            <div class="col-md-2">
                <label>Added in portfolio</label>
                <select class="form-control" @bind="portfolioValuationModel.ViewModel.AddedInPortfolio">
                    @foreach (var item in portfolioValuationModel.ViewModel.AddedInPortfolioList)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>     
            </div>
        </div>
    </div>  
</div>
<br/>
<div class="row">
    <div class="col">
        <div class="col-md-12">
            <div class="card card-primary" style="">
                <div class="card-header" style="background-color:#0066ff">
                    <div class="caption">
                        <font color="white">Characteristics selection</font>
                    </div>
                </div>
                <div class="card-body" style="background-color:#e6f0ff">
                    <div class="row">
                        <div class="col-md-3">          
                            <label>From</label>
                            <input class="form-control must-field" type="date" @bind="portfolioValuationModel.ViewModel.From" @bind:format="yyyy-MM-dd">
                        </div>
                        <div class="col-md-3">          
                            <label>To</label>
                            <input class="form-control must-field" type="date" @bind="portfolioValuationModel.ViewModel.To" @bind:format="yyyy-MM-dd">
                        </div>
                        <div class="col-md-2">  
                            <label>Debt type</label>
                            <select class="form-control" @bind="portfolioValuationModel.ViewModel.DebtType">
                                @foreach (var item in portfolioValuationModel.ViewModel.DebtTypeList)
                                {
                                    <option value="@item.Value">@item.Text</option>
                                }
                            </select>
                        </div> 
                            <div class="col-md-2">          
                            <label>Judicialized</label>
                            <select class="form-control" @bind="portfolioValuationModel.ViewModel.Judicialized">
                                @foreach (var item in portfolioValuationModel.ViewModel.JudicializedList)
                                {
                                    <option value="@item.Value">@item.Text</option>
                                }
                            </select>         
                        </div>
                        <div class="col-md-2">          
                            <label>Insolvency</label>
                            <select class="form-control" @bind="portfolioValuationModel.ViewModel.Insolvency">
                                @foreach (var item in portfolioValuationModel.ViewModel.InsolvencyList)
                                {
                                    <option value="@item.Value">@item.Text</option>
                                }
                            </select>     						
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-2">
                            <label>Performing status</label>
                            <select class="form-control" @bind="portfolioValuationModel.ViewModel.PerformingStatus">
                                @foreach (var item in portfolioValuationModel.ViewModel.PerformingStatusList)
                                {
                                    <option value="@item.Value">@item.Text</option>
                                }
                            </select>
                        </div>  
                        <div class="col-md-2">          
                            <label>Debt (OB)</label>
                            <select class="form-control" @bind="portfolioValuationModel.ViewModel.DebtOB">
                                @foreach (var item in portfolioValuationModel.ViewModel.DebtOBList)
                                {
                                    <option value="@item.Value">@item.Text</option>
                                }
                            </select>     
                            </div>
                        <div class="col-md-2">
                            <label>Debtor name</label>
                            <input type="text" class="form-control" @bind="portfolioValuationModel.ViewModel.DebtorName">
                        </div> 
                        <div class="col-md-2">  	
                            <label>Debtor type</label>
                            <select class="form-control" @bind="portfolioValuationModel.ViewModel.DebtorType">
                                @foreach (var item in portfolioValuationModel.ViewModel.DebtorTypeList)
                                {
                                    <option value="@item.Value">@item.Text</option>
                                }
                            </select>
                        </div> 
                        <div class="col-md-2">          
                            <label>Region</label>
                            <select class="form-control" @bind="portfolioValuationModel.ViewModel.Region">
                                @foreach (var item in portfolioValuationModel.ViewModel.RegionList)
                                {
                                    <option value="@item.Value">@item.Text</option>
                                }
                            </select>     
                        </div>
                    </div>
                    <hr style="height:0.5px; color:#e6e6e6;background-color:#cccccc;">
                    <div class="row">
                        <div class="col-md-12"> 
                            <h5>Contract type:</h5>
                            @foreach (var item in portfolioValuationModel.ViewModel.ContractTypes)
                            {
                                bool Checked = false;
                                if (SelectedValues.Contains(item.Id))  
                                {
                                    Checked = true;
                                }
                                <div class="checkbox" Height="15" Width="15">
                                    <div class="col-md-3">
                                        <label>
                                            <input type="checkbox"
                                                Height="15"
                                                Width="15"
                                                checked="@Checked"
                                                @onchange="e => { CheckboxClicked(item.Id, e.Value); }" />
                                            @item.Name
                                        </label>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <button class="btn btn-primary" style="position:relative;left:90%" @onclick="Summary">
                        <i class="fa fa-cog"></i>&nbsp;&nbsp;Calculate
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
@if (@showSummary)
{
    <Assessment Caption="Summary" Summary="@portfolioValuationModel.Summary" showDetailButton="true" OnDetailsClick="Details" showDetails="@showDetails" />
}
@if (@showDetails)
{
    <DetailsTable
        ContractList="@ContractList"
        FilteredContractList="@FilteredContractList"
        Participants="@portfolioValuationModel.Participants"
        OnViewContract="View"
        OnRemoveContract="Remove"
    />
    <br />
    @if (isAdd == "1")
    {
        <p align="right">
            <button class="btn  btn-primary" @onclick="UpdatePortfolio">
                <i class="fa fa-envelope"></i>&nbsp;&nbsp;Save
            </button>
            <button class="btn  btn-danger" @onclick="Cancel">
                <i class="fa fa-close"></i>&nbsp;&nbsp;Cancel
            </button>
        </p>
    }
    else
    {
        <p align="right">
            <button class="btn btn-success" @onclick="AddPortfolio">
                <i class="fa fa-plus-square-o"></i>&nbsp;&nbsp;Add Portfolio
            </button>
            <button class="btn  btn-primary" >
                <i class="fa fa-download"></i>&nbsp;&nbsp;Perimeter
            </button>
        </p>
    }
}

<div class="modal fade" id="myModal" style="background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
 
            <!-- Modal Header -->
            <div class="modal-header">
                <h4 id="title" class="modal-title"></h4>
                <button type="button" data-dismiss="modal">x</button>
            </div>
 
            <!-- Modal body -->
            <div class="modal-body">
                <span id="message"></span>
            </div>
 
            <!-- Modal footer -->
            <div class="modal-footer">
                <button id="btnOK" type="button" class="btn btn-light" data-dismiss="modal">OK</button>
                <button id="btnOKConfirm" type="button" class="btn btn-light" data-dismiss="modal" @onclick="Cancel">OK</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="myModalSuccess" style="background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
 
            <!-- Modal Header -->
            <div class="modal-header">
                <h4 id="title" class="modal-title">Success</h4>
                <button type="button" data-dismiss="modal" @onclick="Cancel">x</button>
            </div>
 
            <!-- Modal body -->
            <div class="modal-body">
                <span id="messageSuccess"></span>
            </div>
 
            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-dismiss="modal" @onclick="Cancel">OK</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string portfolio { get; set; }
    [Parameter]
    public string subportfolio { get; set; }
    [Parameter]
    public string isAdd {get; set;}

    private PortfolioValuationModel portfolioValuationModel { get; set; } = new PortfolioValuationModel
    {
        ViewModel = new ViewModel
        {
            DebtOBList = new List<SelectListItem>(),
            DebtorTypeList = new List<SelectListItem>(),
            DebtTypeList = new List<SelectListItem>(),
            InsolvencyList = new List<SelectListItem>(),
            JudicializedList = new List<SelectListItem>(),
            PerformingStatusList = new List<SelectListItem>(),
            RegionList = new List<SelectListItem>(),
            ContractTypes = new List<ContractType>(),
            AddedInPortfolioList = new List<SelectListItem>()
        }
    };

    private List<int> SelectedValues { get; set; } = new List<int>();

    private bool showSummary { get; set; }
    private bool showDetails { get; set; }
    private bool showPortfolioDetail { get; set; }
    private string pageBreadcrumb { get; set; }

    private List<Contract> ContractList = new List<Contract>();
    private List<Contract> FilteredContractList = new List<Contract>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            portfolio = portfolio.Length == 1 ? portfolio.Replace("_", "") : portfolio;
            subportfolio = subportfolio.Length == 1 ? subportfolio.Replace("_", "") : subportfolio;

            portfolioValuationModel = await PortfolioValuationService.Index(portfolio, subportfolio, isAdd);
            if (portfolioValuationModel.ResponseCode == (int)HttpStatusCode.Unauthorized)
            {
                NavigationManager.NavigateTo("/account/login");
            }

            showSummary = false;
            showDetails = false;
            showPortfolioDetail = isAdd == "1" ? true : false;
            pageBreadcrumb = isAdd == "1" ? "Portfolio evaluation » Add contracts" : "Portfolio evaluation";

            StateHasChanged();
        }
    }

    private void CheckboxClicked(int aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
        StateHasChanged();
    }

    private async void Summary()
    {
        portfolioValuationModel.ViewModel.ContractTypes.ForEach(x => x.IsSelected = false);
        portfolioValuationModel.ViewModel.ContractTypes.Where(x => SelectedValues.Contains(x.Id)).ToList().ForEach(x => x.IsSelected = true);
        portfolioValuationModel.ViewModel.ReflectExcludedContractIds = false;
        portfolioValuationModel.ViewModel.ExcludePossitiveOB = true;
        portfolioValuationModel = await PortfolioValuationService.Summary(portfolioValuationModel);
        if (portfolioValuationModel.ResponseCode == (int)HttpStatusCode.Unauthorized)
        {
            NavigationManager.NavigateTo("/account/login");
        }
        showSummary = true;
        showDetails = false;
        StateHasChanged();
    }

    private async void Details()
    {
        if (!showDetails)
        {
            portfolioValuationModel.ViewModel.ExcludedContractIds = new List<int>();
            portfolioValuationModel.ViewModel.ExcludePossitiveOB = true;
            portfolioValuationModel = await PortfolioValuationService.Details(portfolioValuationModel);
            if (portfolioValuationModel.ResponseCode == (int)HttpStatusCode.Unauthorized)
            {
                NavigationManager.NavigateTo("/account/login");
            }
            ContractList = FilteredContractList = portfolioValuationModel.Contracts;
        }
        showDetails = showDetails ? false : true;
        StateHasChanged();
    }

    private async void AddPortfolio()
    {
        var inPortfolio = portfolioValuationModel.Contracts.FirstOrDefault(x => x.PortfolioContracts.Any(x => x.Portfolio.OperationType == "SALE"));
        if (inPortfolio != null)
        {
            await JSRuntime.InvokeVoidAsync("showDialog", "Warning!", "Contract/s already added to a portfolio.");
            return;
        }
        await sessionStorage.SetItemAsync("portfolioValuationViewModel", portfolioValuationModel.ViewModel);
        NavigationManager.NavigateTo("/portfolios/1");
    }

    private void View(Contract contract)
    {

    }

    private void Remove(Contract contract)
    {
        portfolioValuationModel.Contracts.Remove(contract);
        portfolioValuationModel.ViewModel.ExcludedContractIds.Add(contract.Id);
        StateHasChanged();
    }

    private async void UpdatePortfolio()
    {
        var inPortfolio = portfolioValuationModel.Contracts.FirstOrDefault(x => x.PortfolioContracts.Any(x => x.Portfolio.OperationType == "SALE"));
        if (inPortfolio != null)
        {
            await JSRuntime.InvokeVoidAsync("showDialog", "Warning!", "Contract/s already added to a portfolio.");
            return;
        }
        foreach (var contract in portfolioValuationModel.Contracts)
        {
            contract.Investors = portfolioValuationModel.Investors.Where(x => x.ContractId == contract.Id).ToList();
            contract.Participants = portfolioValuationModel.Participants.Where(x => x.ContractId == contract.Id).ToList();
            contract.Procedures = portfolioValuationModel.Procedures.Where(x => x.ContractId == contract.Id).ToList();
        }
        var updatePortfolioResponse = await PortfolioRegistrationService.UpdatePortfolio(portfolioValuationModel);
        if (updatePortfolioResponse.ResponseCode == (int)HttpStatusCode.Unauthorized)
        {
            NavigationManager.NavigateTo("/account/login");
        }
        if (updatePortfolioResponse.ResponseCode == 200)
        {
            await JSRuntime.InvokeVoidAsync("showDialogSuccess", updatePortfolioResponse.Message);
            return;
        }
        string title;
        switch (updatePortfolioResponse.ResponseCode)
        {
            case 400:
                title = "Warning!";
                break;
            case 500:
                title = "Error!";
                break;
            default:
                title = "";
                break;
        }
        await JSRuntime.InvokeVoidAsync("showDialog", title, updatePortfolioResponse.Message);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/portfolios/0");
    }
}
