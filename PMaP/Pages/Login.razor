@page "/account/login"

@using PMaP.Data
@using System.Net
@using PMaP.Models.Authenticate
@using PMaP.Pages.PortfolioEvaluation
@inject IAccountService AccountService
@inject IJSRuntime JSRuntime
@inject IMainLayoutService MainLayoutService
@inject IStringLocalizer<Login> localizer
@inject NavigationManager NavigationManager

<div style="padding-left: 15%;">
    <div class="card card-primary" style="width: 60%;">
        <div class="card-header" style="background-color:#0066ff">
            <h4 class="caption"><font color="white">@localizer["lblLogin"]</font></h4>
        </div>
        <div class="card-body" style="background-color:#e6f0ff">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>@localizer["Username"]</label>
                    <InputText @bind-Value="model.Username" class="form-control" />
                    <ValidationMessage For="@(() => model.Username)" />
                </div>
                <div class="form-group">
                    <label>@localizer["Password"]</label>
                    <InputText @bind-Value="model.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                <button disabled="@loading" class="btn btn-primary">
                    @if (loading) 
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    @localizer["lblLogin"]
                </button>
            </EditForm>
        </div>
    </div>
</div>

<Dialog Caption="@Caption" Message="@Message" OnClose="OnDialogClose" Type="Dialog.Category.Okay" />

@code {
    private Models.Authenticate.AuthenticateRequest model = new Models.Authenticate.AuthenticateRequest();
    private bool loading;

    private string Caption { get; set; }
    private string Message { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AuthenticateResponse authenticateResponse = await MainLayoutService.GetUser();
            if (authenticateResponse != null)
                authenticateResponse = await AccountService.GetById(authenticateResponse.Id);
            if (authenticateResponse != null && authenticateResponse.Profile != null)
            {
                string navigate = "notFound";
                if (authenticateResponse.Profile.Privileges != null)
                {
                    var privileges = authenticateResponse.Profile.Privileges.Split(";");
                    navigate = privileges.First();
                }
                NavigationManager.NavigateTo(navigate);
            }
        }
    }

    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            var authenticateResponse = await AccountService.Authenticate(model);
            if (authenticateResponse.RespCode == (int)HttpStatusCode.OK)
            {
                string navigate = "notFound";
                if (authenticateResponse.Profile != null && authenticateResponse.Profile.Privileges != null)
                {
                    var privileges = authenticateResponse.Profile.Privileges.Split(";");
                    navigate = privileges.First();
                }
                NavigationManager.NavigateTo(navigate, true);
            }
            if (authenticateResponse.RespCode != (int)HttpStatusCode.OK)
            {
                loading = false;
                Caption = localizer["Warning"];
                Message = authenticateResponse.Message;
                await JSRuntime.InvokeVoidAsync("openDialog");
            }
        }
        catch
        {
            loading = false;
        }
        StateHasChanged();
    }

    private void OnDialogClose(bool isOk)
    {
        
    }
}
