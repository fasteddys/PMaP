@using PMaP.Data
@using PMaP.Models.Authenticate
@inherits LayoutComponentBase
@inject IMainLayoutService MainLayoutService
@inject NavigationManager NavigationManager

<style>
    body {
	    background-color: #000000 ;
	    font-family: Arial, Helvetica, sans-serif;
    }

    .navbar {
	    color: #fff;
	    background: #0066ff !important;
	    padding: 5px 16px;
	    border-radius: 0;
	    border: none;
	    box-shadow: 0 0 3px rgba(0,0,0,.1);
    }

    .dropbtn {
        color: #485a6a;
        background: #ffffff !important;
        padding: 8px;
        font-size: 14px;
        font-weight: 400;
        border: none;
        margin-left: 5px;
    }

    .dropdown {
        position: relative;
    }

    .dropdown-content {
        display: none;
        position: sticky;
        background-color: #99dff;
        min-width: 160px;

        z-index: 1;
    }

    .dropdown-content a {
        color: #ffffff;
        padding: 12px 16px;
        text-decoration: none;
        text-align: left;
        display: block;
        cursor: pointer;
        opacity: 0.3;
        filter: alpha(opacity=30);
    }

    .dropdown-content a:hover {
        background-color: #4e6e94;
        filter: alpha(opacity=100);
        opacity: 1
    }

    /* Active/current link */
    .navbar a.active {
        background-color: #666;
        color: white;
    }

    .dropdown:hover .dropdown-content {
        display: block;
    }

    .dropdown:hover .dropbtn {
  
    }

    <!-- Estilo para las pestañas -->

    <!-- Estilo para las pestañas -->
    .Tabs {
        float:left;
        width:100%;
        line-height:120%;
        font-size: 16px;
        font-weight: bold;
    }

    .Tabs ul {
        margin:0;
        padding:0;
        list-style:none;
    }

    .Tabs li {
        float:left;
        margin:0 0 0 3px;
        padding:0;
        @*background:url("p-der.gif") no-repeat right top;*@
    }

    .Tabs a {
        padding:3px 10px 3px 10px;
        display:block;
        @*background:url("p-izq.gif") no-repeat left top;*@
        color: #000000;
        text-decoration: none;
        background-color:#ccddff;
    }

    .Tabs .activa a {
        background-image:url("p-izq-activo.gif");
    }
    .Tabs .activa {
        background-image:url("p-der-activo.gif");
    }

    .button_add {
        background-color: #ffffff;
        border: none;
        color: black;
        padding: 8px 16px;
        text-align: center;
        font-size: 11px;
        margin: 1px 1px;
        opacity: 0.7;
        transition: 0.3s;
        display: inline-block;
        text-decoration: none;
        cursor: pointer;
        position: relative; left: 100px;
    }

    .button_add:hover {
        opacity: 1
    }

    .validation-message {
        color: red;
    }

    .sort-link {
        cursor:pointer;
        text-decoration:underline;
    }

    .btn-disabled {
        background-color: #D5D8DC;
    }
</style>

@if (showNavMenu)
{
    <div class="sidebar" style="height: 100%; width: 216px; position: fixed; z-index: 2; top: 0; left: 0; overflow-x: hidden; background-color: #30557f;">
        <div class="container clearfix et_menu_container">
            <span style="font-size: 15px; font-weight: bold; text-align: center;">
                <br />
            </span>
        </div>
        <NavMenu UserName="@userName" />
    </div>

    <div class="main" style="margin-left: 200px; padding-left: 20px;">
        <div class="content page-content-wrapper" style="margin-top: 15px;">
            <div class="container clearfix et_menu_container" style="text-align: center;">
                <span style="font-size: 15px; font-weight: bold;">
                    Portfolio Management Platform - PMaP
                </span>
            </div>
        </div>
        @Body
    </div>
}

@if (!showNavMenu)
{
    <Header UserName="@userName" />
    @Body
}

@code {
    private bool showNavMenu = false;
    private string userName = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            NavigationManager.LocationChanged += LocationChanged;
            base.OnInitialized();

            await NavMenuVisibility();
        }
    }

    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        await NavMenuVisibility();
    }

    private async Task NavMenuVisibility()
    {
        showNavMenu = false;
        userName = "";

        AuthenticateResponse authenticateResponse = await MainLayoutService.GetUser();
        if (authenticateResponse != null && !string.IsNullOrEmpty(authenticateResponse.Token))
        {
            showNavMenu = true;
            userName = authenticateResponse.Username;
        }

        StateHasChanged();
    }
}